//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/TeleportAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TeleportAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TeleportAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TeleportAction"",
    ""maps"": [
        {
            ""name"": ""Teleport"",
            ""id"": ""f6e70db1-79c3-402b-a576-0d18ddf8ae99"",
            ""actions"": [
                {
                    ""name"": ""Teleport1"",
                    ""type"": ""Button"",
                    ""id"": ""48da3c1f-0f86-4c0e-a2b2-d5146541336b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport2"",
                    ""type"": ""Button"",
                    ""id"": ""8653ae36-d02e-4c9c-8e3e-3c00358666aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport3"",
                    ""type"": ""Button"",
                    ""id"": ""fa18e7d7-fdb8-4407-894a-302abd433387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f9d0442-7c24-403e-a896-4b32a73b912a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e46104c-f469-473f-a69c-f4afa1f11f19"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ce623b0-b10d-4fdf-a72d-0c02774f7039"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b4ea08c-39bb-4136-a78b-f8f92c852c72"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab64c8f-27fb-4099-a5dc-ea78d7055576"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81ef0212-1162-4f23-8cd9-6fc909c067d4"",
                    ""path"": ""<Keyboard>/numpad3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Teleport
        m_Teleport = asset.FindActionMap("Teleport", throwIfNotFound: true);
        m_Teleport_Teleport1 = m_Teleport.FindAction("Teleport1", throwIfNotFound: true);
        m_Teleport_Teleport2 = m_Teleport.FindAction("Teleport2", throwIfNotFound: true);
        m_Teleport_Teleport3 = m_Teleport.FindAction("Teleport3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Teleport
    private readonly InputActionMap m_Teleport;
    private List<ITeleportActions> m_TeleportActionsCallbackInterfaces = new List<ITeleportActions>();
    private readonly InputAction m_Teleport_Teleport1;
    private readonly InputAction m_Teleport_Teleport2;
    private readonly InputAction m_Teleport_Teleport3;
    public struct TeleportActions
    {
        private @TeleportAction m_Wrapper;
        public TeleportActions(@TeleportAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teleport1 => m_Wrapper.m_Teleport_Teleport1;
        public InputAction @Teleport2 => m_Wrapper.m_Teleport_Teleport2;
        public InputAction @Teleport3 => m_Wrapper.m_Teleport_Teleport3;
        public InputActionMap Get() { return m_Wrapper.m_Teleport; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TeleportActions set) { return set.Get(); }
        public void AddCallbacks(ITeleportActions instance)
        {
            if (instance == null || m_Wrapper.m_TeleportActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TeleportActionsCallbackInterfaces.Add(instance);
            @Teleport1.started += instance.OnTeleport1;
            @Teleport1.performed += instance.OnTeleport1;
            @Teleport1.canceled += instance.OnTeleport1;
            @Teleport2.started += instance.OnTeleport2;
            @Teleport2.performed += instance.OnTeleport2;
            @Teleport2.canceled += instance.OnTeleport2;
            @Teleport3.started += instance.OnTeleport3;
            @Teleport3.performed += instance.OnTeleport3;
            @Teleport3.canceled += instance.OnTeleport3;
        }

        private void UnregisterCallbacks(ITeleportActions instance)
        {
            @Teleport1.started -= instance.OnTeleport1;
            @Teleport1.performed -= instance.OnTeleport1;
            @Teleport1.canceled -= instance.OnTeleport1;
            @Teleport2.started -= instance.OnTeleport2;
            @Teleport2.performed -= instance.OnTeleport2;
            @Teleport2.canceled -= instance.OnTeleport2;
            @Teleport3.started -= instance.OnTeleport3;
            @Teleport3.performed -= instance.OnTeleport3;
            @Teleport3.canceled -= instance.OnTeleport3;
        }

        public void RemoveCallbacks(ITeleportActions instance)
        {
            if (m_Wrapper.m_TeleportActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITeleportActions instance)
        {
            foreach (var item in m_Wrapper.m_TeleportActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TeleportActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TeleportActions @Teleport => new TeleportActions(this);
    public interface ITeleportActions
    {
        void OnTeleport1(InputAction.CallbackContext context);
        void OnTeleport2(InputAction.CallbackContext context);
        void OnTeleport3(InputAction.CallbackContext context);
    }
}
